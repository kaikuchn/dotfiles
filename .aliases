function em() {
  local target_path=${1:-"."}
  emacsclient -nqc --frame-parameters="((fullscreen . maximized))" $target_path
}
function kill-em() {
  emacsclient -e "(kill-emacs)"
}

function op() {
  local item=${1:?'Must pass item to fetch'}
  onepass get item $item | jq '.details.fields|map(select(.designation=="password").value)[]' | head -n1 | pbcopy
  (sleep 30; pbcopy < /dev/null) &
  onepass get item $item | jq '.details.fields|map(select(.designation=="username").value)[]' | head -n1
}

function git-pullrequest() {
  local repository=$(basename -s .git `git config --get remote.origin.url`)
  local branch=$(git rev-parse --abbrev-ref HEAD)
  git push --set-upstream origin "$branch"
  open "https://github.com/say-way/$repository/pull/new/$branch"
}
alias git-pr='git-pullrequest'

alias now='gdate +%s%N'

# alias trash_locks='fuser -f ~/.Trash/* | xargs kill -9'
# alias givx='function _givx(){ git clone git@github.com:ivx/$1.git; };_givx'
alias be='bundle exec'
alias gc='git commit --verbose'
alias gpn='git push 2>&1 | grep "git push" | xargs -I{} bash -c {}'
alias please='sudo $(fc -ln -1)'

alias glo="git log -30 --graph --pretty=format:'%h %ad %s (%an)' --date=short"
alias citus='docker $(docker-machine config citus-master) exec -it citus-coordinator psql -U postgres -d core_production'
alias goprod='ssh kaikuchn@vm2.sayway.com'
alias make_cert='openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365'
alias govm='ssh kaikuchn@vm2.sayway.com'

rssh() {
  SWARM="swarm01"
  APP="core-web-app01"
  if [[ $# -eq 1 ]]; then
    SWARM="demo02"
    if [[ $1 == 'd' ]]; then
      APP="core-web-demo01"
    fi
  fi
  eval 'docker $(docker-machine config --swarm $SWARM) exec --user deploy -it $APP bash'
}

rrc() {
  SWARM="swarm01"
  APP="core-web-app01"
  if [[ $# -eq 1 ]]; then
    SWARM="demo02"
    if [[ $1 == 'd' ]]; then
      APP="core-web-demo01"
    fi
  fi
  eval 'docker $(docker-machine config --swarm $SWARM) exec --user deploy -it $APP bash -c "LANG=en_US.UTF-8 rails console production;"'
}

update-docker-config() {
  cp -r docker/prod/.docker $HOME
  grep -rl "home/deploy" ~/.docker/machine/machines | xargs sed -i.trashme s@/home/deploy@$HOME@g
  rm ~/.docker/machine/machines/**/*.trashme
  chmod -R go-rwx $HOME/.docker
}

gen-pass() {
  local length=${1:-16}
  LC_ALL=C; tr -cd '[:alnum:]' < /dev/urandom | fold -w$length | head -n1
}

ansver='ansible-playbook --syntax-check'

docker-conn() {
  local machine=${1:?'Usage: docker_ssh <machine_name> [...shell_command]'}
  shift
  read key user host <<< $(jq '.Driver|[.SSHKeyPath,.SSHUser,.PrivateIPAddress]|@sh' ~/.docker/machine/machines/$machine/config.json | tr -d \'\")
  echo $key $user@$host
}

docker-ssh() {
  local machine=${1:?'Usage: docker_ssh <machine_name> [...shell_command]'}
  shift
  read key user host <<< $(jq '.Driver|[.SSHKeyPath,.SSHUser,.PrivateIPAddress]|@sh' ~/.docker/machine/machines/$machine/config.json | tr -d \'\")
  ssh -i $key $user@$host $@
}

function sleep-in() {
  local minutes=$1
  local datetime=`date -v+${minutes}M +"%m/%d/%y %H:%M:%S"`
  sudo pmset schedule sleep "$datetime"
}

function lumi_text_with_topics() {
  jq '(.result.topics|map({(._id): .name})|add) as $topics | .result.documents|map({title, text, topics: .tags|map($topics[.])})'
}
